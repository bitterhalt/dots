# Some rules
cmd open ${{
    case $(file --dereference --brief --mime-type -- "$f") in
    text/*|application/json|inode/x-empty|application/pgp-encrypted) ${EDITOR} $fx ;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
        *)
            setsid -f xdg-open "$fx" >/dev/null 2>&1 ;;
    esac
}}

# Choose opener
cmd open-with &setsid -f ${1} ${fx}

# Chmod
cmd chmod %chmod $* ${fx} && lf -remote "send reload"

# fzf jump
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

# fzf finder
cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

# Make dir
cmd mkdir ${{
    printf "Directory Name: "
    read ans
  mkdir $ans
}}

# Make file
cmd mkfile ${{
    printf "File Name: "
    read ans
  $EDITOR $ans
}}

# Trash items
cmd trash %{{
# Put items into array that we can count them
	files=()
	while read -r line; do files+=("$line"); done <<< "$fx"

# Count how many items there are
	len=${#files[@]}

# Confirm trashing
	if [[ $len == 1 ]]; then
		echo -n "trash '$fx' ?"
	else
		echo -n "trash $len items?"
	fi
	echo -n " [y/N] "

# Read answer
	read -n 1 ans
# Nake it lowercase
	ans="${ans,,}"

	echo

# Nuke
	if [[ $ans == y ]]; then
		trash-put $fx
		if [[ $len == 1 ]]; then
			echo "trashed '$files'"
		else
			echo "trashed $len items"
		fi
	else
# needed to clear the bottom row
		echo
	fi
}}

# Bulkrename Ranger-like
cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

#  Extract
cmd extract !clear; aunpack -- ${fx}

# Ranger-like yank
cmd yank &{{
    case ${1} in
    name) basename "${f}" ;;
    path) printf "%s" "${f}" ;;
    esac |  wl-copy
}}

# Edit lf config
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# Set bg
cmd setbg "$1"

